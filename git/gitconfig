[alias]
	up = pull
	br = branch
	ci = commit
	co = checkout
	df = diff
	ds = diff --staged
	g = grep -I
	lg = log -p
	pb = publish-branch
	pp = !"echo 'Pull'; git pull; echo 'Push'; git push"
	rb = rbranch
	rc = rank-contributors
	rv = review
	sm = show-merges
	st = status
	s = status -s
	undo = reset --soft HEAD^
	ksdiff = difftool -y -t Kaleidoscope
	ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
	ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
	dmremote = push origin --delete

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# Ammend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # Show the diff and log of the last change for a file
    # git lastchange package.json
	lastchange = log -p --follow -n 1

[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	 ui = auto

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true

[difftool "Kaleidoscope"]
	cmd = ksdiff-wrapper git \"$LOCAL\" \"$REMOTE\"

[core]
	excludesfile = ~/.gitignore_global
	editor = vim

[help]
	autocorrect = 1

[filter "media"]
	clean = git media clean %f
	smudge = git media smudge %f
	required = true

[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true

# Any GitHub repo with my username should be checked out r/w by default
# http://rentzsch.tumblr.com/post/564806957/public-but-hackable-git-submodules

[url "git@github.com:petersendidit/"]
  insteadOf = "git://github.com/petersendidit/"

# URL shorthands

[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
	insteadOf = "github:"

[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
	insteadOf = "gist:"
